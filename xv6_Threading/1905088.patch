diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..70e34ec
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+    "C_Cpp.errorSquiggles": "disabled"
+}
\ No newline at end of file
diff --git a/1905088.patch b/1905088.patch
new file mode 100644
index 0000000..6f6f1b2
--- /dev/null
+++ b/1905088.patch
@@ -0,0 +1,951 @@
+diff --git a/Makefile b/Makefile
+index 39a99d7..a822569 100644
+--- a/Makefile
++++ b/Makefile
+@@ -132,6 +132,8 @@ UPROGS=\
+ 	$U/_grind\
+ 	$U/_wc\
+ 	$U/_zombie\
++	$U/_threads\
++	$U/_producer_consumer\
+ 
+ fs.img: mkfs/mkfs README $(UPROGS)
+ 	mkfs/mkfs fs.img README $(UPROGS)
+diff --git a/kernel/defs.h b/kernel/defs.h
+index a3c962b..68bf2be 100644
+--- a/kernel/defs.h
++++ b/kernel/defs.h
+@@ -106,6 +106,12 @@ void            yield(void);
+ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
+ int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
+ void            procdump(void);
++int             thread_create(void(*fcn)(void*), void *arg, void*stack);
++int             thread_join(int thread_id);
++void            thread_exit(void);
++void            thread_freepagetable(pagetable_t pagetable, uint64 sz);
++int             user_sleep(uint64 va, int value);
++int             user_wakeup(uint64 va, uint64 count);
+ 
+ // swtch.S
+ void            swtch(struct context*, struct context*);
+@@ -173,6 +179,9 @@ uint64          walkaddr(pagetable_t, uint64);
+ int             copyout(pagetable_t, uint64, char *, uint64);
+ int             copyin(pagetable_t, char *, uint64, uint64);
+ int             copyinstr(pagetable_t, char *, uint64, uint64);
++void            uvmThreadFree(pagetable_t pagetable, uint64 sz);
++int             allocuvm(pagetable_t old, pagetable_t new, uint64 sz);
++int             allocuvm_range(pagetable_t old, pagetable_t new, uint64 oldsz, uint64 newsz);        
+ 
+ // plic.c
+ void            plicinit(void);
+diff --git a/kernel/proc.c b/kernel/proc.c
+index 959b778..d1caf4d 100644
+--- a/kernel/proc.c
++++ b/kernel/proc.c
+@@ -13,7 +13,9 @@ struct proc proc[NPROC];
+ struct proc *initproc;
+ 
+ int nextpid = 1;
++int nextMemIdx = 1;
+ struct spinlock pid_lock;
++struct spinlock mem_idx_lock;
+ 
+ extern void forkret(void);
+ static void freeproc(struct proc *p);
+@@ -53,6 +55,7 @@ procinit(void)
+   initlock(&wait_lock, "wait_lock");
+   for(p = proc; p < &proc[NPROC]; p++) {
+       initlock(&p->lock, "proc");
++      initlock(&p->mem_lock, "mem_lock");
+       p->state = UNUSED;
+       p->kstack = KSTACK((int) (p - proc));
+   }
+@@ -102,6 +105,19 @@ allocpid()
+   return pid;
+ }
+ 
++int
++allocMemIdx()
++{
++  int mem_idx;
++  
++  acquire(&mem_idx_lock);
++  mem_idx = nextMemIdx;
++  nextMemIdx += 1;
++  release(&mem_idx_lock);
++
++  return mem_idx;
++}
++
+ // Look in the process table for an UNUSED proc.
+ // If found, initialize state required to run in the kernel,
+ // and return with p->lock held.
+@@ -123,6 +139,7 @@ allocproc(void)
+ 
+ found:
+   p->pid = allocpid();
++  p->mem_idx = allocMemIdx();
+   p->state = USED;
+ 
+   // Allocate a trapframe page.
+@@ -158,8 +175,15 @@ freeproc(struct proc *p)
+   if(p->trapframe)
+     kfree((void*)p->trapframe);
+   p->trapframe = 0;
+-  if(p->pagetable)
+-    proc_freepagetable(p->pagetable, p->sz);
++  if(p->pagetable){
++    if(p->is_thread == 0){
++        proc_freepagetable(p->pagetable, p->sz);
++    }
++    else{
++      thread_freepagetable(p->pagetable, p->sz);
++    }
++  }
++  
+   p->pagetable = 0;
+   p->sz = 0;
+   p->pid = 0;
+@@ -169,6 +193,7 @@ freeproc(struct proc *p)
+   p->killed = 0;
+   p->xstate = 0;
+   p->state = UNUSED;
++  p->mem_idx = 0;
+ }
+ 
+ // Create a user page table for a given process, with no user memory,
+@@ -215,6 +240,14 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
+   uvmfree(pagetable, sz);
+ }
+ 
++void
++thread_freepagetable(pagetable_t pagetable, uint64 sz)
++{
++  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
++  uvmunmap(pagetable, TRAPFRAME, 1, 0);
++  uvmThreadFree(pagetable, sz);
++}
++
+ // a user program that calls exec("/init")
+ // assembled from ../user/initcode.S
+ // od -t xC ../user/initcode
+@@ -261,6 +294,7 @@ growproc(int n)
+ {
+   uint64 sz;
+   struct proc *p = myproc();
++  acquire(&p->mem_lock);
+ 
+   sz = p->sz;
+   if(n > 0){
+@@ -271,6 +305,19 @@ growproc(int n)
+     sz = uvmdealloc(p->pagetable, sz, sz + n);
+   }
+   p->sz = sz;
++  for(struct proc *np = proc; np <&proc[NPROC]; np++){
++    if(np->mem_idx == p->mem_idx && np->pid != p->pid){
++      if(n >= 0){
++        allocuvm_range(np->pagetable, p->pagetable,np->sz,p->sz);
++      }
++      else{
++        uint64 npages = (PGROUNDUP(np->sz) - PGROUNDUP(sz))/PGSIZE;
++        uvmunmap(np->pagetable, p->sz, npages, 0);
++      }
++      np->sz = sz;
++    }
++  }
++  release(&p->mem_lock);
+   return 0;
+ }
+ 
+@@ -325,6 +372,105 @@ fork(void)
+   return pid;
+ }
+ 
++int 
++thread_create(void(*fcn)(void*), void *arg, void*stack){
++  int i, pid;
++  struct proc *np;
++  struct proc *p = myproc();
++
++  // Allocate process.
++  if((np = allocproc()) == 0){
++    return -1;
++  }
++
++  // Copy user memory from parent to child.
++  if(allocuvm(p->pagetable, np->pagetable, p->sz) < 0){
++    freeproc(np);
++    np->state = UNUSED;
++    release(&np->lock);
++    return -1;
++  }
++  np->sz = p->sz;
++
++  // copy saved user registers.
++  *(np->trapframe) = *(p->trapframe);
++  np->trapframe->a0 = (uint64)arg;
++  // new user registers to start executing at forkret,
++  // which returns to user space.
++  np->trapframe->epc = (uint64)fcn;
++  np->trapframe->sp = (uint64)stack+4096;
++  np->trapframe->sp -= np->trapframe->sp % 16;
++  np->is_thread = 1;
++  np->mem_idx = p->mem_idx;
++
++  // increment reference counts on open file descriptors.
++  for(i = 0; i < NOFILE; i++)
++    if(p->ofile[i])
++      np->ofile[i] = filedup(p->ofile[i]);
++  np->cwd = idup(p->cwd);
++
++  safestrcpy(np->name, p->name, sizeof(p->name));
++
++  pid = np->pid;
++
++  release(&np->lock);
++
++  acquire(&wait_lock);
++  np->parent = p;
++  release(&wait_lock);
++
++  acquire(&np->lock);
++  np->state = RUNNABLE;
++  release(&np->lock);
++
++  return pid;
++}
++
++int 
++thread_join(int thread_id){
++struct proc *pp;
++  int havekids, pid;
++  struct proc *p = myproc();
++
++  acquire(&wait_lock);
++
++  for(;;){
++    // Scan through table looking for exited children.
++    havekids = 0;
++    for(pp = proc; pp < &proc[NPROC]; pp++){
++      if(pp->pid == thread_id){
++        // make sure the child isn't still in exit() or swtch().
++        acquire(&pp->lock);
++
++        havekids = 1;
++        if(pp->state == ZOMBIE){
++          // Found one.
++          pid = pp->pid;
++          freeproc(pp);
++          release(&pp->lock);
++          release(&wait_lock);
++          return pid;
++        }
++        release(&pp->lock);
++      }
++    }
++
++    // No point waiting if we don't have any children.
++    if(!havekids || killed(p)){
++      release(&wait_lock);
++      return -1;
++    }
++    
++    // Wait for a child to exit.
++    sleep(p, &wait_lock);  //DOC: wait-sleep
++  }
++}
++
++void
++thread_exit(void){
++  exit(0);
++}
++
+ // Pass p's abandoned children to init.
+ // Caller must hold wait_lock.
+ void
+@@ -681,3 +827,44 @@ procdump(void)
+     printf("\n");
+   }
+ }
++
++int user_sleep(uint64 va, int value)
++{
++  struct proc *p = myproc();
++
++  acquire(&p->mem_lock);
++
++  uint64 va0 = PGROUNDDOWN(va);
++  uint64 pa = walkaddr(p->pagetable, va0) + va - va0;
++
++  if(__sync_bool_compare_and_swap((int *)pa, value, value))
++  {
++    sleep((void *)pa, &p->mem_lock);
++  }
++
++  release(&p->mem_lock);
++
++  return 0;
++}
++
++int user_wakeup(uint64 va, uint64 count)
++{
++  struct proc *p = myproc();
++
++  acquire(&p->mem_lock);
++
++  uint64 va0 = PGROUNDDOWN(va);
++  uint64 pa = walkaddr(p->pagetable, va0) + va - va0;
++
++  for(struct proc *iterator = proc; count > 0 && iterator < &proc[NPROC]; ++iterator){
++    acquire(&iterator->lock);
++    if(iterator->chan == (void *)pa && iterator->state == SLEEPING){
++      iterator->state = RUNNABLE;
++      --count;
++    }
++    release(&iterator->lock);
++  }
++
++  release(&p->mem_lock);
++  return 0;
++}
+\ No newline at end of file
+diff --git a/kernel/proc.h b/kernel/proc.h
+index d021857..09afec0 100644
+--- a/kernel/proc.h
++++ b/kernel/proc.h
+@@ -104,4 +104,7 @@ struct proc {
+   struct file *ofile[NOFILE];  // Open files
+   struct inode *cwd;           // Current directory
+   char name[16];               // Process name (debugging)
++  int is_thread;
++  int mem_idx;
++  struct spinlock mem_lock;
+ };
+diff --git a/kernel/syscall.c b/kernel/syscall.c
+index ed65409..cfef652 100644
+--- a/kernel/syscall.c
++++ b/kernel/syscall.c
+@@ -101,6 +101,12 @@ extern uint64 sys_unlink(void);
+ extern uint64 sys_link(void);
+ extern uint64 sys_mkdir(void);
+ extern uint64 sys_close(void);
++extern uint64 sys_thread_create(void);
++extern uint64 sys_thread_join(void);
++extern uint64 sys_thread_exit(void);
++extern uint64 sys_user_yield(void);
++extern uint64 sys_user_sleep(void);
++extern uint64 sys_user_wakeup(void);
+ 
+ // An array mapping syscall numbers from syscall.h
+ // to the function that handles the system call.
+@@ -126,6 +132,12 @@ static uint64 (*syscalls[])(void) = {
+ [SYS_link]    sys_link,
+ [SYS_mkdir]   sys_mkdir,
+ [SYS_close]   sys_close,
++[SYS_thread_create] sys_thread_create,
++[SYS_thread_join] sys_thread_join,
++[SYS_thread_exit] sys_thread_exit,
++[SYS_user_yield] sys_user_yield,
++[SYS_user_sleep] sys_user_sleep,
++[SYS_user_wakeup] sys_user_wakeup,
+ };
+ 
+ void
+diff --git a/kernel/syscall.h b/kernel/syscall.h
+index bc5f356..902afbd 100644
+--- a/kernel/syscall.h
++++ b/kernel/syscall.h
+@@ -20,3 +20,9 @@
+ #define SYS_link   19
+ #define SYS_mkdir  20
+ #define SYS_close  21
++#define SYS_thread_create 22
++#define SYS_thread_join 23
++#define SYS_thread_exit 24
++#define SYS_user_yield 25
++#define SYS_user_sleep 26
++#define SYS_user_wakeup 27
+diff --git a/kernel/sysproc.c b/kernel/sysproc.c
+index 1de184e..a94f4fd 100644
+--- a/kernel/sysproc.c
++++ b/kernel/sysproc.c
+@@ -89,3 +89,55 @@ sys_uptime(void)
+   release(&tickslock);
+   return xticks;
+ }
++
++uint64
++sys_thread_create(void)
++{
++  uint64 fcn, arg, stack;
++  argaddr(0, &fcn);
++  argaddr(1, &arg);
++  argaddr(2, &stack);
++  return thread_create((void*)fcn, (void*)arg, (void*)stack);
++}
++
++uint64
++sys_thread_join(void){
++  int id;
++  argint(0, &id);
++  return thread_join(id);
++}
++
++uint64
++sys_thread_exit(void){
++  thread_exit();
++  return 0;
++}
++
++uint64
++sys_user_yield(void){
++  yield();
++  return 0;
++}
++
++uint64
++sys_user_sleep(void){
++  uint64 va;
++  int value;
++
++  argaddr(0, &va);
++  argint(1, &value);
++
++  return user_sleep(va, value);
++}
++
++uint64
++sys_user_wakeup(void)
++{
++  uint64 va;
++  uint64 count;
++
++  argaddr(0, &va);
++  argaddr(1, &count);
++
++  return user_wakeup(va, count);
++}
+\ No newline at end of file
+diff --git a/kernel/vm.c b/kernel/vm.c
+index 9f69783..c5430fe 100644
+--- a/kernel/vm.c
++++ b/kernel/vm.c
+@@ -296,6 +296,14 @@ uvmfree(pagetable_t pagetable, uint64 sz)
+   freewalk(pagetable);
+ }
+ 
++void
++uvmThreadFree(pagetable_t pagetable, uint64 sz)
++{
++  if(sz > 0)
++    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
++  freewalk(pagetable);
++}
++
+ // Given a parent process's page table, copy
+ // its memory into a child's page table.
+ // Copies both the page table and the
+@@ -437,3 +445,54 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
+     return -1;
+   }
+ }
++
++int
++allocuvm(pagetable_t old, pagetable_t new, uint64 sz){
++  pte_t *pte;
++  uint64 pa, i;
++  uint flags;
++
++  for(i = 0; i < sz; i += PGSIZE){
++    if((pte = walk(old, i, 0)) == 0){
++      panic("allocuvm: pte should exist");
++      return -1;
++    }
++    if((*pte & PTE_V) == 0){
++      panic("allocuvm: page not present");
++      return -1;
++    }
++    pa = PTE2PA(*pte);
++    flags = PTE_FLAGS(*pte);
++    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
++      uvmunmap(new, 0, i / PGSIZE, 1);
++      return -1;
++    }
++  }
++  return 0;
++}
++
++int
++allocuvm_range(pagetable_t old, pagetable_t new, uint64 oldsz, uint64 newsz){
++  pte_t *pte;
++  uint64 pa, i;
++  uint flags;
++  oldsz = PGROUNDUP(oldsz);
++
++  for(i=oldsz; i<newsz; i+=PGSIZE){
++    if((pte = walk(old, i, 0)) == 0){
++      panic("allocuvm_range: pte should exist");
++      return -1;
++    }
++    if((*pte & PTE_V) == 0){
++      panic("allocuvm_range: page not present");
++      return -1;
++    }
++    pa = PTE2PA(*pte);
++    flags = PTE_FLAGS(*pte);
++    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
++      uvmunmap(new, 0, i / PGSIZE, 1);
++      return -1;
++    }
++  }
++  return 0;
++}
+diff --git a/user/convar.h b/user/convar.h
+new file mode 100644
+index 0000000..72254f7
+--- /dev/null
++++ b/user/convar.h
+@@ -0,0 +1,53 @@
++// Condition variable implementation
++#ifndef CONDVAR_H
++#define CONDVAR_H
++
++#include "user.h"
++#include "mutexlock.h"
++
++struct condvar
++{
++    uint count;
++    uint prev_count;
++};
++
++void cond_init(struct condvar *cv)
++{
++    cv->count = 0;
++    cv->prev_count = 0;
++}
++
++void cond_wait(struct condvar *cv, struct thread_mutex *m)
++{
++    __sync_synchronize();
++
++    uint count = __sync_fetch_and_add(&cv->count, 0);
++    __sync_bool_compare_and_swap(&cv->prev_count, cv->prev_count, count);
++
++    thread_mutex_unlock(m);
++    user_sleep(&cv->count, count);
++    thread_mutex_lock(m);
++}
++
++void cond_signal(struct condvar *cv)
++{
++    __sync_synchronize();
++
++    uint count = __sync_fetch_and_add(&cv->prev_count, 0) + 1;
++
++    __sync_bool_compare_and_swap(&cv->count, cv->count, count);
++
++    user_wakeup(&cv->count, 1);
++}
++
++void cond_broadcast(struct condvar *cv)
++{
++    __sync_synchronize();
++
++    uint count = __sync_fetch_and_add(&cv->prev_count, 0) + 1;
++
++    __sync_bool_compare_and_swap(&cv->count, cv->count, count);
++    user_wakeup(&cv->count, (uint64)-1); 
++}
++
++#endif
+\ No newline at end of file
+diff --git a/user/mutexlock.h b/user/mutexlock.h
+new file mode 100644
+index 0000000..b14ad37
+--- /dev/null
++++ b/user/mutexlock.h
+@@ -0,0 +1,28 @@
++#ifndef __MUTEXLOCK_H__
++#define __MUTEXLOCK_H__
++
++#include "user.h"
++
++struct thread_mutex{
++    int locked;
++};
++
++void 
++thread_mutex_init(struct thread_mutex *m){
++    m->locked = 0;
++}
++
++void 
++thread_mutex_lock(struct thread_mutex *m){
++   while(__sync_lock_test_and_set(&m->locked, 1) != 0)
++    user_yield();
++  __sync_synchronize();
++}
++
++void 
++thread_mutex_unlock(struct thread_mutex *m){
++    __sync_synchronize();
++  __sync_lock_release(&m->locked);
++}
++
++#endif
+\ No newline at end of file
+diff --git a/user/producer_consumer.c b/user/producer_consumer.c
+new file mode 100644
+index 0000000..f176205
+--- /dev/null
++++ b/user/producer_consumer.c
+@@ -0,0 +1,149 @@
++#include "kernel/types.h"
++#include "kernel/stat.h"
++#include "user/user.h"
++#include "user/spinlock.h"
++#include "user/semaphore.h"
++
++struct queue
++{
++	int arr[16];
++	int front;
++	int rear;
++	int size;
++};
++
++void queue_init(struct queue* q)
++{
++    q->front = 0;
++	q->rear = 0;
++	q->size = 0;
++
++}
++
++void queue_push(struct queue* q,int x)
++{
++		q->arr[q->rear] = x;
++		q->rear = (q->rear+1)%16;
++		q->size++;
++}
++
++int queue_front(struct queue* q)
++{
++		if(q->size==0)
++			return -1;
++		return q->arr[q->front];
++}
++
++void queue_pop(struct queue* q)
++{
++		q->front = (q->front+1)%16;
++		q->size--;
++}
++
++struct queue q;
++
++struct thread_spinlock lk;
++// a mutex object lock
++struct thread_mutex mlock;
++// a semaphore object empty
++struct semaphore empty;
++// a semaphore object full
++struct semaphore full;
++
++struct thread_mutex print_lock;
++
++void init_locks()
++{
++	thread_spin_init(&lk);
++	// initialize mutex lock
++    thread_mutex_init(&mlock);
++	// initialize semaphore empty with 5
++    sem_init(&empty,5);
++	// initialize semaphore full with 0
++    sem_init(&full,0);
++
++    thread_mutex_init(&print_lock);
++
++}
++
++void  ProducerFunc(void * arg)
++{
++    thread_mutex_lock(&print_lock);
++	printf("%s\n",(char*)arg);
++    thread_mutex_unlock(&print_lock);
++	int i;
++	for(i=1;i<=10;i++)
++	{
++		// wait for semphore empty
++        sem_wait(&empty);
++
++		// wait for mutex lock
++        thread_mutex_lock(&mlock);
++		sleep(1);
++		queue_push(&q, i);
++        thread_mutex_lock(&print_lock);
++		printf("producer produced item %d\n",i);
++		thread_mutex_unlock(&print_lock);
++		// unlock mutex lock
++        thread_mutex_unlock(&mlock);
++		// post semaphore full
++        sem_post(&full);
++	}
++    thread_exit();
++    return;
++}
++
++void  ConsumerFunc(void * arg)
++{
++    thread_mutex_lock(&print_lock);
++	printf("%s\n",(char*)arg);
++    thread_mutex_unlock(&print_lock);
++	int i;
++	for(i=1;i<=10;i++)
++	{
++		// wait for semphore full
++        sem_wait(&full);
++		// wait for mutex lock
++        thread_mutex_lock(&mlock);
++		sleep(1);
++		int item = queue_front(&q);
++		queue_pop(&q);
++        thread_mutex_lock(&print_lock);
++		printf("consumer consumed item %d\n",item);
++        thread_mutex_unlock(&print_lock);
++
++
++		// unlock mutex lock
++        thread_mutex_unlock(&mlock);
++		// post semaphore empty
++        sem_post(&empty);
++	}
++    thread_exit();
++    return;
++}
++
++int main(void)
++{
++
++	init_locks();
++
++	char * message1 = "i am producer";
++	char * message2 = "i am consumer";
++
++
++	void *s1, *s2;
++	int thread1, thread2, r1, r2;
++
++	s1 = malloc(4096);
++	s2 = malloc(4096);
++
++	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
++	thread2 = thread_create(ConsumerFunc, (void*)message2, s2);
++
++	r1 = thread_join(thread1);
++	r2 = thread_join(thread2);
++
++	printf("Threads finished: (%d):%d, (%d):%d\n",
++      thread1, r1, thread2, r2);
++	exit(0);
++}
+\ No newline at end of file
+diff --git a/user/semaphore.h b/user/semaphore.h
+new file mode 100644
+index 0000000..ebc4332
+--- /dev/null
++++ b/user/semaphore.h
+@@ -0,0 +1,46 @@
++#ifndef _SEMAPHORE_H_
++#define _SEMAPHORE_H_
++
++#include "user.h"
++#include "mutexlock.h"
++#include "convar.h"
++
++struct semaphore
++{
++    int count;
++    struct thread_mutex m;
++    struct condvar cv;
++};
++
++void sem_init(struct semaphore *s, int value)
++{
++    s->count = value;
++    thread_mutex_init(&s->m);
++    cond_init(&s->cv);
++}
++
++void sem_post(struct semaphore *s)
++{
++    thread_mutex_lock(&s->m);
++
++    s->count++;
++
++    cond_signal(&s->cv);
++    thread_mutex_unlock(&s->m);
++}
++
++void sem_wait(struct semaphore *s)
++{
++    thread_mutex_lock(&s->m);
++
++    while(s->count <= 0)
++    {
++        cond_wait(&s->cv, &s->m);
++    }
++
++    s->count--;
++
++    thread_mutex_unlock(&s->m);
++}
++
++#endif
+\ No newline at end of file
+diff --git a/user/spinlock.h b/user/spinlock.h
+new file mode 100644
+index 0000000..6611ee1
+--- /dev/null
++++ b/user/spinlock.h
+@@ -0,0 +1,25 @@
++#ifndef _THREAD_SPINLOCK_H_
++#define _THREAD_SPINLOCK_H_
++
++struct thread_spinlock{
++  uint locked;
++};
++
++void
++thread_spin_init(struct thread_spinlock *lk){
++  lk->locked = 0;
++}
++
++void 
++thread_spin_lock(struct thread_spinlock *lk){   
++  while(__sync_lock_test_and_set(&lk->locked, 1) != 0);
++  __sync_synchronize();
++}
++
++void 
++thread_spin_unlock(struct thread_spinlock *lk){
++  __sync_synchronize();
++  __sync_lock_release(&lk->locked);
++}
++
++#endif
+\ No newline at end of file
+diff --git a/user/threads.c b/user/threads.c
+new file mode 100644
+index 0000000..4f24a0f
+--- /dev/null
++++ b/user/threads.c
+@@ -0,0 +1,75 @@
++#include "kernel/types.h"
++#include "kernel/stat.h"
++#include "user/user.h"
++#include "user/spinlock.h"
++#include "user/mutexlock.h"
++
++struct balance {
++    char name[32];
++    int amount;
++};
++
++struct thread_spinlock lock;
++struct thread_mutex mlock;
++
++volatile int total_balance = 0;
++
++volatile unsigned int delay (unsigned int d) {
++   unsigned int i; 
++   for (i = 0; i < d; i++) {
++       __asm volatile( "nop" ::: );
++   }
++
++   return i;   
++}
++
++void do_work(void *arg){
++    int i; 
++    int old;
++   
++    struct balance *b = (struct balance*) arg; 
++    thread_spin_lock(&lock);
++    printf( "Starting do_work: s:%s\n", b->name);
++    thread_spin_unlock(&lock);
++
++    for (i = 0; i < b->amount; i++) { 
++        // lock and mlock will be implemented by you.
++         //thread_spin_lock(&lock);
++          thread_mutex_lock(&mlock);
++         old = total_balance;
++         delay(100000);
++	 // if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
++         total_balance = old + 1;
++         //thread_spin_unlock(&lock);
++          thread_mutex_unlock(&mlock);
++
++    }
++  
++    printf( "Done s:%x\n", b->name);
++
++    thread_exit();
++    return;
++}
++
++int main(int argc, char *argv[]) {
++
++  struct balance b1 = {"b1", 3200};
++  struct balance b2 = {"b2", 2800};
++ 
++  void *s1, *s2;
++  int thread1, thread2, r1, r2;
++
++  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
++  s2 = malloc(4096);
++
++  thread1 = thread_create(do_work, (void*)&b1, s1);
++  thread2 = thread_create(do_work, (void*)&b2, s2); 
++
++  r1 = thread_join(thread1);
++  r2 = thread_join(thread2);
++  
++  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
++      thread1, r1, thread2, r2, total_balance);
++
++  exit(0);
++}
+\ No newline at end of file
+diff --git a/user/user.h b/user/user.h
+index 4d398d5..8d1477e 100644
+--- a/user/user.h
++++ b/user/user.h
+@@ -22,6 +22,12 @@ int getpid(void);
+ char* sbrk(int);
+ int sleep(int);
+ int uptime(void);
++int thread_create(void(*fcn)(void*), void *arg, void*stack);
++int thread_join(int thread_id);
++void thread_exit(void);
++void user_yield(void);
++void user_sleep(void*, int );
++void user_wakeup(void*, unsigned long long);
+ 
+ // ulib.c
+ int stat(const char*, struct stat*);
+diff --git a/user/usys.pl b/user/usys.pl
+index 01e426e..f9aec27 100755
+--- a/user/usys.pl
++++ b/user/usys.pl
+@@ -36,3 +36,9 @@ entry("getpid");
+ entry("sbrk");
+ entry("sleep");
+ entry("uptime");
++entry("thread_create");
++entry("thread_join");
++entry("thread_exit");
++entry("user_yield");
++entry("user_sleep");
++entry("user_wakeup");
diff --git a/Makefile b/Makefile
index 39a99d7..a822569 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
+	$U/_producer_consumer\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..8aaee37 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -88,7 +88,7 @@ int             fork(void);
 int             growproc(int);
 void            proc_mapstacks(pagetable_t);
 pagetable_t     proc_pagetable(struct proc *);
-void            proc_freepagetable(pagetable_t, uint64);
+void            proc_freepagetable(pagetable_t, uint64, int);
 int             kill(int);
 int             killed(struct proc*);
 void            setkilled(struct proc*);
@@ -106,6 +106,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             thread_create(void(*fcn)(void*), void *arg, void*stack);
+int             thread_join(int thread_id);
+void            thread_exit(void);
+int             user_sleep(uint64 va, int value);
+int             user_wakeup(uint64 va, uint64 count);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -165,7 +170,7 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
-void            uvmfree(pagetable_t, uint64);
+void            uvmfree(pagetable_t, uint64, int);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
 pte_t *         walk(pagetable_t, uint64, int);
@@ -173,6 +178,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             allocuvm(pagetable_t old, pagetable_t new, uint64 oldsz, uint64 newsz);        
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..730874a 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -126,13 +126,13 @@ exec(char *path, char **argv)
   p->sz = sz;
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
-  proc_freepagetable(oldpagetable, oldsz);
+  proc_freepagetable(oldpagetable, oldsz, 1);
 
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
   if(pagetable)
-    proc_freepagetable(pagetable, sz);
+    proc_freepagetable(pagetable, sz, 1);
   if(ip){
     iunlockput(ip);
     end_op();
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..377e001 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -13,7 +13,9 @@ struct proc proc[NPROC];
 struct proc *initproc;
 
 int nextpid = 1;
+int nextMemIdx = 1;
 struct spinlock pid_lock;
+struct spinlock mem_idx_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
@@ -53,6 +55,7 @@ procinit(void)
   initlock(&wait_lock, "wait_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
+      initlock(&p->mem_lock, "mem_lock");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
@@ -102,6 +105,19 @@ allocpid()
   return pid;
 }
 
+int
+allocMemIdx()
+{
+  int mem_idx;
+  
+  acquire(&mem_idx_lock);
+  mem_idx = nextMemIdx;
+  nextMemIdx += 1;
+  release(&mem_idx_lock);
+
+  return mem_idx;
+}
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
@@ -123,6 +139,7 @@ allocproc(void)
 
 found:
   p->pid = allocpid();
+  p->mem_idx = allocMemIdx();
   p->state = USED;
 
   // Allocate a trapframe page.
@@ -158,8 +175,10 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  if(p->pagetable){
+    proc_freepagetable(p->pagetable, p->sz, !p->is_thread);
+  }
+  
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -169,6 +188,8 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->mem_idx = 0;
+  p->is_thread = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -189,7 +210,7 @@ proc_pagetable(struct proc *p)
   // to/from user space, so not PTE_U.
   if(mappages(pagetable, TRAMPOLINE, PGSIZE,
               (uint64)trampoline, PTE_R | PTE_X) < 0){
-    uvmfree(pagetable, 0);
+    uvmfree(pagetable, 0, 1);
     return 0;
   }
 
@@ -198,7 +219,7 @@ proc_pagetable(struct proc *p)
   if(mappages(pagetable, TRAPFRAME, PGSIZE,
               (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
     uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-    uvmfree(pagetable, 0);
+    uvmfree(pagetable, 0, 1);
     return 0;
   }
 
@@ -208,11 +229,11 @@ proc_pagetable(struct proc *p)
 // Free a process's page table, and free the
 // physical memory it refers to.
 void
-proc_freepagetable(pagetable_t pagetable, uint64 sz)
+proc_freepagetable(pagetable_t pagetable, uint64 sz, int flag)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
-  uvmfree(pagetable, sz);
+  uvmfree(pagetable, sz, flag);
 }
 
 // a user program that calls exec("/init")
@@ -261,6 +282,7 @@ growproc(int n)
 {
   uint64 sz;
   struct proc *p = myproc();
+  acquire(&p->mem_lock);
 
   sz = p->sz;
   if(n > 0){
@@ -271,6 +293,19 @@ growproc(int n)
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
+  for(struct proc *np = proc; np <&proc[NPROC]; np++){
+    if(np->mem_idx == p->mem_idx && np->pid != p->pid){
+      if(n >= 0){
+        allocuvm(np->pagetable, p->pagetable,np->sz,p->sz);
+      }
+      else{
+        uint64 npages = (PGROUNDUP(np->sz) - PGROUNDUP(sz))/PGSIZE;
+        uvmunmap(np->pagetable, p->sz, npages, 0);
+      }
+      np->sz = sz;
+    }
+  }
+  release(&p->mem_lock);
   return 0;
 }
 
@@ -325,6 +360,105 @@ fork(void)
   return pid;
 }
 
+int 
+thread_create(void(*fcn)(void*), void *arg, void*stack){
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  if(allocuvm(p->pagetable, np->pagetable,0, p->sz) < 0){
+    freeproc(np);
+    np->state = UNUSED;
+    release(&np->lock);
+    return -1;
+  }
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+  np->trapframe->a0 = (uint64)arg;
+  // new user registers to start executing at forkret,
+  // which returns to user space.
+  np->trapframe->epc = (uint64)fcn;
+  np->trapframe->sp = (uint64)stack+4096;
+  np->trapframe->sp -= np->trapframe->sp % 16;
+  np->is_thread = 1;
+  np->mem_idx = p->mem_idx;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+int 
+thread_join(int thread_id){
+struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->pid == thread_id){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+    
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
+void
+thread_exit(void){
+  exit(0);
+}
+
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
 void
@@ -681,3 +815,44 @@ procdump(void)
     printf("\n");
   }
 }
+
+int user_sleep(uint64 va, int value)
+{
+  struct proc *p = myproc();
+
+  acquire(&p->mem_lock);
+
+  uint64 va0 = PGROUNDDOWN(va);
+  uint64 pa = walkaddr(p->pagetable, va0) + va - va0;
+
+  if(__sync_bool_compare_and_swap((int *)pa, value, value))
+  {
+    sleep((void *)pa, &p->mem_lock);
+  }
+
+  release(&p->mem_lock);
+
+  return 0;
+}
+
+int user_wakeup(uint64 va, uint64 count)
+{
+  struct proc *p = myproc();
+
+  acquire(&p->mem_lock);
+
+  uint64 va0 = PGROUNDDOWN(va);
+  uint64 pa = walkaddr(p->pagetable, va0) + va - va0;
+
+  for(struct proc *iterator = proc; count > 0 && iterator < &proc[NPROC]; ++iterator){
+    acquire(&iterator->lock);
+    if(iterator->chan == (void *)pa && iterator->state == SLEEPING){
+      iterator->state = RUNNABLE;
+      --count;
+    }
+    release(&iterator->lock);
+  }
+
+  release(&p->mem_lock);
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..09afec0 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int is_thread;
+  int mem_idx;
+  struct spinlock mem_lock;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..cfef652 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,12 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_user_yield(void);
+extern uint64 sys_user_sleep(void);
+extern uint64 sys_user_wakeup(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +132,12 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
+[SYS_user_yield] sys_user_yield,
+[SYS_user_sleep] sys_user_sleep,
+[SYS_user_wakeup] sys_user_wakeup,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..902afbd 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,9 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
+#define SYS_user_yield 25
+#define SYS_user_sleep 26
+#define SYS_user_wakeup 27
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..a94f4fd 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,55 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn, arg, stack;
+  argaddr(0, &fcn);
+  argaddr(1, &arg);
+  argaddr(2, &stack);
+  return thread_create((void*)fcn, (void*)arg, (void*)stack);
+}
+
+uint64
+sys_thread_join(void){
+  int id;
+  argint(0, &id);
+  return thread_join(id);
+}
+
+uint64
+sys_thread_exit(void){
+  thread_exit();
+  return 0;
+}
+
+uint64
+sys_user_yield(void){
+  yield();
+  return 0;
+}
+
+uint64
+sys_user_sleep(void){
+  uint64 va;
+  int value;
+
+  argaddr(0, &va);
+  argint(1, &value);
+
+  return user_sleep(va, value);
+}
+
+uint64
+sys_user_wakeup(void)
+{
+  uint64 va;
+  uint64 count;
+
+  argaddr(0, &va);
+  argaddr(1, &count);
+
+  return user_wakeup(va, count);
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..1e77cbb 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -289,13 +289,11 @@ freewalk(pagetable_t pagetable)
 // Free user memory pages,
 // then free page-table pages.
 void
-uvmfree(pagetable_t pagetable, uint64 sz)
-{
+uvmfree(pagetable_t pagetable, uint64 sz, int flag){
   if(sz > 0)
-    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, flag);
   freewalk(pagetable);
 }
-
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -437,3 +435,29 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+int
+allocuvm(pagetable_t old, pagetable_t new, uint64 oldsz, uint64 newsz){
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  oldsz = PGROUNDUP(oldsz);
+
+  for(i=oldsz; i<newsz; i+=PGSIZE){
+    if((pte = walk(old, i, 0)) == 0){
+      panic("allocuvm: pte should exist");
+      return -1;
+    }
+    if((*pte & PTE_V) == 0){
+      panic("allocuvm: page not present");
+      return -1;
+    }
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      uvmunmap(new, 0, i / PGSIZE, 1);
+      return -1;
+    }
+  }
+  return 0;
+}
diff --git a/user/convar.h b/user/convar.h
new file mode 100644
index 0000000..72254f7
--- /dev/null
+++ b/user/convar.h
@@ -0,0 +1,53 @@
+// Condition variable implementation
+#ifndef CONDVAR_H
+#define CONDVAR_H
+
+#include "user.h"
+#include "mutexlock.h"
+
+struct condvar
+{
+    uint count;
+    uint prev_count;
+};
+
+void cond_init(struct condvar *cv)
+{
+    cv->count = 0;
+    cv->prev_count = 0;
+}
+
+void cond_wait(struct condvar *cv, struct thread_mutex *m)
+{
+    __sync_synchronize();
+
+    uint count = __sync_fetch_and_add(&cv->count, 0);
+    __sync_bool_compare_and_swap(&cv->prev_count, cv->prev_count, count);
+
+    thread_mutex_unlock(m);
+    user_sleep(&cv->count, count);
+    thread_mutex_lock(m);
+}
+
+void cond_signal(struct condvar *cv)
+{
+    __sync_synchronize();
+
+    uint count = __sync_fetch_and_add(&cv->prev_count, 0) + 1;
+
+    __sync_bool_compare_and_swap(&cv->count, cv->count, count);
+
+    user_wakeup(&cv->count, 1);
+}
+
+void cond_broadcast(struct condvar *cv)
+{
+    __sync_synchronize();
+
+    uint count = __sync_fetch_and_add(&cv->prev_count, 0) + 1;
+
+    __sync_bool_compare_and_swap(&cv->count, cv->count, count);
+    user_wakeup(&cv->count, (uint64)-1); 
+}
+
+#endif
\ No newline at end of file
diff --git a/user/mutexlock.h b/user/mutexlock.h
new file mode 100644
index 0000000..b14ad37
--- /dev/null
+++ b/user/mutexlock.h
@@ -0,0 +1,28 @@
+#ifndef __MUTEXLOCK_H__
+#define __MUTEXLOCK_H__
+
+#include "user.h"
+
+struct thread_mutex{
+    int locked;
+};
+
+void 
+thread_mutex_init(struct thread_mutex *m){
+    m->locked = 0;
+}
+
+void 
+thread_mutex_lock(struct thread_mutex *m){
+   while(__sync_lock_test_and_set(&m->locked, 1) != 0)
+    user_yield();
+  __sync_synchronize();
+}
+
+void 
+thread_mutex_unlock(struct thread_mutex *m){
+    __sync_synchronize();
+  __sync_lock_release(&m->locked);
+}
+
+#endif
\ No newline at end of file
diff --git a/user/producer_consumer.c b/user/producer_consumer.c
new file mode 100644
index 0000000..f176205
--- /dev/null
+++ b/user/producer_consumer.c
@@ -0,0 +1,149 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/spinlock.h"
+#include "user/semaphore.h"
+
+struct queue
+{
+	int arr[16];
+	int front;
+	int rear;
+	int size;
+};
+
+void queue_init(struct queue* q)
+{
+    q->front = 0;
+	q->rear = 0;
+	q->size = 0;
+
+}
+
+void queue_push(struct queue* q,int x)
+{
+		q->arr[q->rear] = x;
+		q->rear = (q->rear+1)%16;
+		q->size++;
+}
+
+int queue_front(struct queue* q)
+{
+		if(q->size==0)
+			return -1;
+		return q->arr[q->front];
+}
+
+void queue_pop(struct queue* q)
+{
+		q->front = (q->front+1)%16;
+		q->size--;
+}
+
+struct queue q;
+
+struct thread_spinlock lk;
+// a mutex object lock
+struct thread_mutex mlock;
+// a semaphore object empty
+struct semaphore empty;
+// a semaphore object full
+struct semaphore full;
+
+struct thread_mutex print_lock;
+
+void init_locks()
+{
+	thread_spin_init(&lk);
+	// initialize mutex lock
+    thread_mutex_init(&mlock);
+	// initialize semaphore empty with 5
+    sem_init(&empty,5);
+	// initialize semaphore full with 0
+    sem_init(&full,0);
+
+    thread_mutex_init(&print_lock);
+
+}
+
+void  ProducerFunc(void * arg)
+{
+    thread_mutex_lock(&print_lock);
+	printf("%s\n",(char*)arg);
+    thread_mutex_unlock(&print_lock);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore empty
+        sem_wait(&empty);
+
+		// wait for mutex lock
+        thread_mutex_lock(&mlock);
+		sleep(1);
+		queue_push(&q, i);
+        thread_mutex_lock(&print_lock);
+		printf("producer produced item %d\n",i);
+		thread_mutex_unlock(&print_lock);
+		// unlock mutex lock
+        thread_mutex_unlock(&mlock);
+		// post semaphore full
+        sem_post(&full);
+	}
+    thread_exit();
+    return;
+}
+
+void  ConsumerFunc(void * arg)
+{
+    thread_mutex_lock(&print_lock);
+	printf("%s\n",(char*)arg);
+    thread_mutex_unlock(&print_lock);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore full
+        sem_wait(&full);
+		// wait for mutex lock
+        thread_mutex_lock(&mlock);
+		sleep(1);
+		int item = queue_front(&q);
+		queue_pop(&q);
+        thread_mutex_lock(&print_lock);
+		printf("consumer consumed item %d\n",item);
+        thread_mutex_unlock(&print_lock);
+
+
+		// unlock mutex lock
+        thread_mutex_unlock(&mlock);
+		// post semaphore empty
+        sem_post(&empty);
+	}
+    thread_exit();
+    return;
+}
+
+int main(void)
+{
+
+	init_locks();
+
+	char * message1 = "i am producer";
+	char * message2 = "i am consumer";
+
+
+	void *s1, *s2;
+	int thread1, thread2, r1, r2;
+
+	s1 = malloc(4096);
+	s2 = malloc(4096);
+
+	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
+	thread2 = thread_create(ConsumerFunc, (void*)message2, s2);
+
+	r1 = thread_join(thread1);
+	r2 = thread_join(thread2);
+
+	printf("Threads finished: (%d):%d, (%d):%d\n",
+      thread1, r1, thread2, r2);
+	exit(0);
+}
\ No newline at end of file
diff --git a/user/semaphore.h b/user/semaphore.h
new file mode 100644
index 0000000..ebc4332
--- /dev/null
+++ b/user/semaphore.h
@@ -0,0 +1,46 @@
+#ifndef _SEMAPHORE_H_
+#define _SEMAPHORE_H_
+
+#include "user.h"
+#include "mutexlock.h"
+#include "convar.h"
+
+struct semaphore
+{
+    int count;
+    struct thread_mutex m;
+    struct condvar cv;
+};
+
+void sem_init(struct semaphore *s, int value)
+{
+    s->count = value;
+    thread_mutex_init(&s->m);
+    cond_init(&s->cv);
+}
+
+void sem_post(struct semaphore *s)
+{
+    thread_mutex_lock(&s->m);
+
+    s->count++;
+
+    cond_signal(&s->cv);
+    thread_mutex_unlock(&s->m);
+}
+
+void sem_wait(struct semaphore *s)
+{
+    thread_mutex_lock(&s->m);
+
+    while(s->count <= 0)
+    {
+        cond_wait(&s->cv, &s->m);
+    }
+
+    s->count--;
+
+    thread_mutex_unlock(&s->m);
+}
+
+#endif
\ No newline at end of file
diff --git a/user/spinlock.h b/user/spinlock.h
new file mode 100644
index 0000000..6611ee1
--- /dev/null
+++ b/user/spinlock.h
@@ -0,0 +1,25 @@
+#ifndef _THREAD_SPINLOCK_H_
+#define _THREAD_SPINLOCK_H_
+
+struct thread_spinlock{
+  uint locked;
+};
+
+void
+thread_spin_init(struct thread_spinlock *lk){
+  lk->locked = 0;
+}
+
+void 
+thread_spin_lock(struct thread_spinlock *lk){   
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0);
+  __sync_synchronize();
+}
+
+void 
+thread_spin_unlock(struct thread_spinlock *lk){
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+}
+
+#endif
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..4f24a0f
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,75 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/spinlock.h"
+#include "user/mutexlock.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+void do_work(void *arg){
+    int i; 
+    int old;
+   
+    struct balance *b = (struct balance*) arg; 
+    thread_spin_lock(&lock);
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_spin_unlock(&lock);
+
+    for (i = 0; i < b->amount; i++) { 
+        // lock and mlock will be implemented by you.
+         //thread_spin_lock(&lock);
+          thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	 // if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         //thread_spin_unlock(&lock);
+          thread_mutex_unlock(&mlock);
+
+    }
+  
+    printf( "Done s:%x\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+ 
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2); 
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..8d1477e 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,12 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+void thread_exit(void);
+void user_yield(void);
+void user_sleep(void*, int );
+void user_wakeup(void*, unsigned long long);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..f9aec27 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,9 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("user_yield");
+entry("user_sleep");
+entry("user_wakeup");
